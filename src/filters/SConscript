#!/usr/bin/env python

import BugleChecks

Import('envs', 'targets', 'aspects')

if 'interceptor' in aspects['parts']:
    filter_env = envs['host'].Clone(
            LIBS = targets['bugle'].out + targets['bugleutils'].out,
            SHLIBPREFIX = '')

    if aspects['binfmt'] == 'elf' and aspects['host-compiler'] == 'gcc':
        filter_env.Append(LINKFLAGS = '-Wl,-soname,${TARGET.file}')

    def simple_filters(env, names):
        for name in names:
            module = env.LoadableModule(name, [name + '.c'])
            Install(aspects['pkglibdir'], module)

    simple_filters(filter_env, [
            'common',
            'exe',
            'extoverride',
            'logstats',
            'showextensions',
            'stats_basic',
            'stats_calls',
            'stats_calltimes',
            'stats_nv',
            'stats_primitives',
            'trace',
            'validate'])

    if aspects['gltype'] == 'gl':
        # These currently only build on desktop GL
        simple_filters(filter_env, [
                'camera',
                'modify',
                'stats_fragments',
                'showstats'])
        module = filter_env.LoadableModule('eps', ['eps.c', '../gl2ps/gl2ps.c'])
        Install(aspects['pkglibdir'], module)

    if aspects['platform'] == 'posix':
        # These currently depend on POSIX features
        simple_filters(filter_env, [
                'checks',
                'debugger',
                'unwindstack'])

    screenshot_env = filter_env.Clone()
    conf = Configure(screenshot_env, custom_tests = BugleChecks.tests)
    if conf.CheckPkgConfig('0.18'):
        if conf.CheckPkg('libavcodec'):
            conf.Define('HAVE_LAVC', 1, 'Define if libavcodec is available')
            conf.env.MergeFlags(['!pkg-config libavcodec --cflags --libs'])
            conf.CheckHeader('libavcodec/avcodec.h')
            conf.CheckHeader('libavformat/avformat.h')
        if conf.CheckPkg('libswscale'):
            conf.Define('HAVE_LIBSWSCALE', 1, 'Define if libswscale is available')
            conf.env.MergeFlags(['!pkg-config libswscale --cflags --libs'])
            conf.CheckHeader('libswscale/swscale.h')
    screenshot_env = conf.Finish()
    simple_filters(screenshot_env, ['screenshot'])
