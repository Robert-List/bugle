#!/usr/bin/env python

import BugleChecks

def internal_checks(env):
    '''
    Checks that will only affect C files in the platform directory.
    '''

    if env.GetOption('help') or env.GetOption('clean'):
        return env

    conf = Configure(env, custom_tests = BugleChecks.tests, config_h = 'platform_config.h')
    return conf.Finish()

Import('envs', 'srcdir', 'targets')

envs['host'].Append(CPPPATH = [srcdir, Dir('.')],
    LIBS = ['user32', 'kernel32'])

platform_env = internal_checks(envs['host'].Clone())

# Don't use -std=c89, otherwise we don't get MSVCRT functions like _strdup
platform_env.AppendUnique(CFLAGS = ['-std=gnu89'])
platform_env.Append(CPPDEFINES = [('__USE_MINGW_ANSI_STDIO', 1)])

targets['bugleutils']['source'].extend(platform_env.SharedObject(source = [
    '../cosf_soft.c',
    '../gettime_queryperformancecounter.c',
    '../isfinite_pass.c',
    '../isnan_pass.c',
    '../nan_soft.c',
    '../round_soft.c',
    '../sinf_soft.c',
    '../strdup_msvcrt.c',
    '../strndup_soft.c',
    '../threads_msvcrt.c',
    '../vasprintf_vsnprintf.c',
    '../vsnprintf_pass.c']))

targets['bugle']['source'].extend(platform_env.SharedObject(source = [
    '../dl_loadlibrary.c'
    ]))
