This document describes the protocol used between the gldb debugger and
the libbugle library debugger filterset. As this is still alpha
software, the protocol is subject to change at any time, and there is
no guarantee that it will be possible to mix versions of gldb and
libbugle.

The protocol is a simple binary protocol. This makes it easier to use
with the read() and write() system calls, rather than using the C stdio
layer. The former are easier to use with features like select(), but
are not suitable for text-based protocols.

Values are all 32-bit except where otherwise specified. Strings are a
32-bit count followed by the characters (no explicit terminator). At
present values are not byte-ordered consistently. However, they are all
run through TO_NETWORK() and TO_HOST() so that these macros may later
map to htonl and ntohl for network transparency. 

Upon hitting any form of breakpoint or upon receiving a request from
the debugger that demands a response, the library will send a response
code and a response length. The length excludes this 8 byte header.

The following responses are defined (the symbols are defined in
common/protocol.h)
RESP_ANS:    A generic response, containing a single number. The request
             determines the meaning.
RESP_BREAK:  Break on a particular function (before execution). Followed
             by the name of the function.
RESP_BREAK_ERROR:  
             Break on an error condition (after execution)
             Followed by the name of the function, then the (textual)
             name of the error.
RESP_STATE:  Response to a state request. Followed by the textual value
             of the state.
RESP_ERROR:  The request was illegal. Followed by an error code (always
             0 for now) and an error string.

After each response group, the debugger should send a request. The
requests have the same basic form. The following requests are defined:

REQ_CONT:  Continue running
REQ_BREAK: Set or clear a breakpoint on the named function.
           Followed by a name then either 1 or 0 (for set/clear).
           Response RESP_ANS has undefined value.
REQ_BREAK_ERROR: 
           Enable or disable breaking on error. Followed by either
           1 or 0 (for set/clear). Response RESP_ANS has undefined value.
REQ_STATE: Requests the value of a state. Followed by the name of
           the state.
REQ_QUIT:  Requests that the program exit.

Each request has a certain set of legal responses, as described below:

REQ_CONT:  RESP_BREAK, RESP_BREAK_ERROR
REQ_BREAK: RESP_ANS, RESP_ERROR
REQ_BREAK_ERROR: RESP_ANS
REQ_STATE: RESP_STATE, RESP_ERROR
REQ_QUIT:  none (program exits)
