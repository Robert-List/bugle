<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % myentities SYSTEM "bugle.ent" >
%myentities;
]>
<chapter id="gles">
    <title>Using bugle with OpenGL ES</title>
    <sect1 id="gles-introduction">
        <title>Introduction</title>
        <para>
            &bugle; has partial support for OpenGL ES. The OpenGL ES 2.0
            support has been tested using the AMD OpenGL ES Emulator 1.3, and
            OpenGL ES 1.1 support has been tested on a hardware platform.
            OpenGL ES 1.0 support has not been tested and may will be broken.
            For OpenGL ES 1.x, only the Common (CM) profile is supported.
        </para>
        <para>
            The testing shows that basic features work. These include tracing,
            and the debugger using breakpoints, examining state, and examining
            shaders. Texture and framebuffer viewing does not currently work
            (due to limitations of the query mechanisms in OpenGL ES). Many of
            the filtersets do not work, either because they intrinsicly depend
            on features excluded from OpenGL ES, or because they have not yet
            been ported. The test suite is not supported.
        </para>
        <para>
            It should be noted that when using an emulator that works on top
            of OpenGL, an alternative approach to debugging is to use
            &bugle; as a regular (desktop) OpenGL debugger. This will reveal
            data such as textures and framebuffers. However, it cannot access
            the error checking that is done in the emulation layer. For
            example, an <symbol>INVALID_ENUM</symbol> error will not be caught
            by the debugger if it is generated entirely within the emulation
            layer.
        </para>
        <para>
            Support on top of X11 rather than Windows is theoretically present
            and compiles, but has not been tested. Feedback from anyone with a
            working OpenGL ES implementation on an X11 system is welcomed.
        </para>
    </sect1>
    <sect1 id="gles-config">
        <title>Configuration</title>
        <para>
            Configuration can be done largely as described in <xref
                linkend="install-configure"/>. To indicate that OpenGL ES is
            desired,
            <parameter>--with-target=<replaceable>config</replaceable></parameter>
            must be passed to <command>configure</command>, where
            <replaceable>config</replaceable> is one of the values below:
        </para>
        <variablelist>
            <varlistentry>
                <term>gles1cm-egl-posix</term>
                <listitem><para>
                        OpenGL ES 1.x Common profile with EGL on a UNIX-like
                        operating system (only tested with GNU/Linux).
                </para></listitem>
            </varlistentry>
            <varlistentry>
                <term>gles2-egl-posix</term>
                <listitem><para>
                        OpenGL ES 2.x with EGL on a UNIX-like
                        operating system (untested).
                </para></listitem>
            </varlistentry>
            <varlistentry>
                <term>gles2-egl-win</term>
                <listitem><para>
                        OpenGL ES 2.x with EGL on Windows
                </para></listitem>
            </varlistentry>
        </variablelist>
        <note>
            <para>
                Desktop OpenGL header files and libraries are still required
                for the GUI debugger.
            </para>
        </note>
        <note>
            <para>
                Currently OpenGL ES 1.x on Windows is not supported, but this
                can easily be added.
            </para>
        </note>
        <para>
            You also need to ensure that your various paths are set correctly.
            The headers, libraries and DLLs for the OpenGL ES implementation
            need to be listed in <envar>CPATH</envar>,
            <envar>LIBRARY_PATH</envar> and <envar>PATH</envar> respectively,
            unless the compiler is already configured to find them.
        </para>
    </sect1>
    <sect1 id="gles-install">
        <title>Installation</title>
        <para>
            Apart from the usual installation step, some extra setup is
            required on a Windows system, due to the limitations of the
            dynamic linker. Create copies of the system
            <filename>libEGL.dll</filename> and
            <filename>libGLESv2.dll</filename> called
            <filename>bglEGL.dll</filename> and
            <filename>bglGLESv2.dll</filename> respectively. Then modify each
            of these
            files so that links to the other use the replacement name. This
            can be done as follows, although you might find that the version
            of <command>sed</command> provided with MSYS is too old:
        </para>
<screen>
<prompt>$</prompt> <userinput>sed -b 's/libGLESv2/bglGLESv2/g' libEGL.dll &gt; bglEGL.dll</userinput>
<prompt>$</prompt> <userinput>sed -b 's/libEGL/bglEGL/g' libGLESv2.dll &gt; bglGLESv2.dll</userinput>
</screen>
        <para>
            You should check that the new files are exactly the same size as
            the originals. Next, make sure that the versions of
            <filename>libEGL.dll</filename> and
            <filename>libGLESv2.dll</filename> installed by &bugle; are the
            first on the path, and that the renamed libraries you generated
            are also on the path.
        </para>
    </sect1>
</chapter>
