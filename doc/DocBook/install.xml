<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % myentities SYSTEM "bugle.ent" >
%myentities;
]>
<chapter id="install">
    <title>Installing Bugle</title>
    <sect1 id="install-requirements">
        <title>Requirements</title>
        <para>
            &Bugle; is intended to work on any POSIX-compliant operating system
            that use the X Windowing System, dynamic linking, and
            <envar>LD_PRELOAD</envar> for library interposition. If it fails
            to work on such an operating system, please let me know (I only
            use it on GNU/Linux). It is also supported on Windows, although
            this support is less complete. It also includes highly
            experimental and incomplete support for OpenGL ES 2 on Windows.
        </para>
        <para>
            The following packages are required to compile &bugle;:
        </para>
        <itemizedlist>
            <listitem><para>
                    GCC, at least version 3.2, and <emphasis>not</emphasis>
                    4.0 (see the <link linkend="faq-gcc-version">FAQ</link>
                    for an explanation of why).
            </para></listitem>
            <listitem><para>
                    A C++ compiler (generally <application>g++</application>)
            </para></listitem>
            <listitem><para>
                    OpenGL header files, including a recent version of <ulink
                        url="http://www.opengl.org/registry/api/glext.h">glext.h</ulink>.
                    A version supporting at least OpenGL 2.0 is required. For
                    OpenGL ES 2, the OpenGL ES 2 and EGL header files are
                    required.
            </para></listitem>
            <listitem><para>Perl 5</para></listitem>
        </itemizedlist>
        <para>
            The following packages are not required, but if present, will
            enable extra functionality:
        </para>
        <variablelist>
            <varlistentry>
                <term><ulink url="http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html">readline</ulink></term>
                <listitem><para>
                        This will enable line editing in the console debugger.
                        The GUI debugger is the preferred method of debugging.
                </para></listitem>
            </varlistentry>
            <varlistentry>
                <term><ulink url="http://www.gtk.org/">GTK+</ulink></term>
                <listitem><para>
                        This is needed for the GUI debugger.
                </para></listitem>
            </varlistentry>
            <varlistentry>
                <term><ulink url="http://gtkglext.sourceforge.net/">gtkglext</ulink></term>
                <listitem><para>
                        This is needed for the texture and framebuffer viewers
                        in the GUI debugger.
                </para></listitem>
            </varlistentry>
            <varlistentry>
                <term><ulink url="http://glew.sourceforge.net/">GLEW</ulink></term>
                <listitem><para>
                        GLEW is also needed for texture and framebuffer
                        viewers.
                </para></listitem>
            </varlistentry>
            <varlistentry>
                <term><ulink url="http://ffmpeg.org/">FFmpeg</ulink></term>
                <listitem><para>
                        If FFmpeg is available, the included <systemitem
                            class="library">libavcodec</systemitem> is used
                        for video capture.
                </para></listitem>
            </varlistentry>
        </variablelist>
    </sect1>

    <sect1 id="install-configure">
        <title>Configuring</title>
        <para>
            &Bugle; uses the standard <command>configure</command> command for
            compile-time configuration. Generic instructions may be found in
            <filename>INSTALL</filename> in the root of the source directory.
            In general, <command>configure</command> will auto-detect optional
            packages and use them only if present, but you can also prevent it
            from depending on certain packages with the following flags.
            FFmpeg (lavc) in particular is a moving target and if you get
            compilation failures, you should try disabling it.
        </para>
        <itemizedlist>
            <listitem><para><option>--without-lavc</option></para></listitem>
            <listitem><para><option>--without-readline</option></para></listitem>
            <listitem><para><option>--without-gtk</option></para></listitem>
            <listitem><para><option>--without-gtkglext</option></para></listitem>
        </itemizedlist>
        <para>
            &Bugle; does not use threads itself, but applications that it
            debugs might, and &bugle; needs to use appropriate locking and
            thread-local storage libraries. The correct option should be
            auto-detected, but you can force it with
            <option>--enable-threads</option>=<replaceable>model</replaceable>.
            Valid models are <literal>posix</literal> and
            <literal>win32</literal>.
        </para>
        <para>
            Finally, &bugle; intercepts events from X11 and Windows. While
            there are no known cases of this causing problems, it is difficult
            to make the interception completely transparent, and so the
            <option>--disable-input</option> option is available to disable it
            at compile time. It is also required when using EGL on a platform
            other than X11 or Windows.
        </para>

        <sect2 id="install-configure-cross">
            <title>Configuring for cross-compilation</title>
            <para>
                If possible, the best way to do cross-compilation is to use
                <ulink
                    url="http://www.scratchbox.org/"><application>scratchbox</application></ulink>,
                where it should all work seamlessly. However,
                <application>scratchbox</application> only supports a limited
                set of cross-compilation targets. If you want to do
                cross-compilation, you will need to jump through some extra
                hoops.
            </para>
            <para>
                First, run <command>configure</command> in the top-level
                directory, passing the appropriate <option>--host</option>
                option for your cross-compiler. Also make sure that the
                appropriate header files and libraries for the
                cross-compilation target are available. You might also need to
                pass extra options to <command>configure</command> to disable
                optional features that are incorrectly detected (see above).
            </para>
            <para>
                Next, change into the <filename
                    class="directory">budgie</filename> subdirectory and run
                the configure script there (if you are configuring in a
                different directory from the source, you will need to be in
                the <filename class="directory">budgie</filename> subdirectory
                of the build directory, running the
                <command>configure</command> script from the <filename
                    class="directory">budgie</filename> subdirectory of the
                source. When doing this, configure for your
                <emphasis>native</emphasis> compiler. This is necessary
                because the program that is built in this directory is run on
                the build machine to produce source code, not on the host.
            </para>
        </sect2>
    </sect1>

    <sect1 id="install-compile">
        <title>Compiling and installing</title>
        <para>
            Compilation is as simple as running <userinput>make</userinput>.
            Before installing, you should remove any previous installation of
            &bugle; to avoid leaving old versions of files around. If you do not
            have your original installation tree to run <userinput>make
                uninstall</userinput>, you should at least remove the files in
            <filename><replaceable>/usr/local/lib/</replaceable>bugle</filename>
            and
            <filename><replaceable>/usr/local/lib/</replaceable>libbugle*</filename>.
            To install the new version, run <userinput>make
                install</userinput> as <systemitem
                class="username">root</systemitem>.
        </para>
        <para>
            Next, you need to install some files for the user that will run
            &bugle;. Create a directory <filename
                class="directory">$HOME/.bugle</filename>, and copy
            <filename>doc/examples/filters</filename> and
            <filename>doc/examples/statistics</filename> into it.
        </para>
    </sect1>

    <sect1 id="install-windows">
        <title>Compiling on Windows</title>
        <para>
            Installing from source on Windows is supported, but it is
            significantly trickier than on
            UNIX-like systems, and currently only recommended for experts.
            The intended target is <ulink
                url="http://www.mingw.org">MinGW</ulink>; you can try using
            Cygwin as well, but it is not tested.
        </para>
        <para>
            Here is the list of steps I used to install on Windows, including
            support for the debugger. The versions numbers were the latest
            available at the time, but newer versions should work too.
        </para>
        <orderedlist>
            <listitem><para>
                    Install <application>MinGW</application> 5.1.4, including
                    <application>GCC</application> and
                    <application>G++</application>, but not
                    <application>make</application>.
            </para></listitem>
            <listitem><para>
                    Install <application>MSYS</application> 1.0.10.
            </para></listitem>
            <listitem><para>
                    Install <application>msysDTK</application> 1.0.1.
                    Alternatively, if you have Cygwin installed, add Cygwin's
                    <filename class="directory">bin</filename> directory to
                    the end of <envar>PATH</envar>.
            </para></listitem>
            <listitem><para>
                    Downloaded
                    <filename>mingw-libgnurx-2.5.1-bin.tar.gz</filename> and
                    <filename>mingw-libgnurx-2.5.1-dev.tar.gz</filename> from
                    the <application>MinGW</application> page, and unpacked
                    both into <filename class="directory">/mingw</filename>
                    (i.e., the directory in which
                    <application>MinGW</application> is installed).
            </para></listitem>
            <listitem><para>
                    Download the <application>GTK+</application> bundle
                    (2.12.11) from <ulink
                        url="http://www.gtk.org/download-windows.html">gtk.org</ulink>,
                    and unpack it into <filename
                        class="directory">/mingw</filename>.
            </para></listitem>
            <listitem><para>
                    Get the <application>gtkglext</application> installer from
                    <ulink url="http://www.bonifazi.eu/appunti/"/>, and
                    install it into <filename
                        class="directory">/mingw</filename>.
            </para></listitem>
            <listitem><para>
                    Download the source for <application>GLEW</application>
                    1.5 and unpack it into a temporary location and built it
                    using make, then install it with the command
                    <userinput>make GLEW_DEST=/mingw install</userinput>.
            </para></listitem>
            <listitem><para>
                    Grab the latest <ulink
                        url="http://www.opengl.org/registry/api/glext.h"><filename>glext.h</filename></ulink> and
                    <ulink
                        url="http://www.opengl.org/registry/api/wglext.h"><filename>wglext.h</filename></ulink>
                    headers, and put them in
                    <filename class="directory">/mingw/include/GL</filename>.
            </para></listitem>
        </orderedlist>
        <para>
            After installation, you will have a
            <filename>opengl32.dll</filename> file installed. When debugging a
            program, you need to place this on the path ahead of the real one.
            This can be achieved by copying it to the same directory as the
            program you intend to debug.
        </para>
    </sect1>
</chapter>
