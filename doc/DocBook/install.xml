<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % myentities SYSTEM "bugle.ent" >
%myentities;
]>
<chapter id="install">
    <title>Installing Bugle</title>
    <sect1 id="install-requirements">
        <title>Requirements</title>
        <para>
            &Bugle; is intended to work on any POSIX-compliant operating system
            that use the X Windowing System, dynamic linking, and
            <envar>LD_PRELOAD</envar> for library interposition. If it fails
            to work on such an operating system, please let me know (I only
            use it on GNU/Linux). It is also supported on Windows, although
            this support is less complete. It also supports OpenGL ES (1.1 and
            2.0), although again, support is less complete and less tested.
        </para>
        <para>
            The following packages are required to compile &bugle;:
        </para>
        <itemizedlist>
            <listitem><para>
                    GCC, at least version 3.2, and <emphasis>not</emphasis>
                    4.0 (see the <link linkend="faq-gcc-version">FAQ</link>
                    for an explanation of why). It has been tested with
                    versions 4.1 to 4.4.
            </para></listitem>
            <listitem><para>
                    A C++ compiler with the POSIX regular expression functions
                    (generally <application>g++</application>)
            </para></listitem>
            <listitem><para>
                    OpenGL header files, including a recent version of <ulink
                        url="http://www.opengl.org/registry/api/glext.h">glext.h</ulink>.
                    A version supporting at least OpenGL 2.0 is required. For
                    OpenGL ES, the OpenGL ES and EGL header files are
                    required.
            </para></listitem>
            <listitem><para>Perl 5</para></listitem>
            <listitem><para>Python 2 (2.5 is tested, 2.4 may work)</para></listitem>
            <listitem><para><ulink url="http://www.scons.org">SCons</ulink> (only 1.20 is tested, older versions may work)</para></listitem>
        </itemizedlist>
        <para>
            The following packages are not required, but if present, will
            enable extra functionality:
        </para>
        <variablelist>
            <varlistentry>
                <term><ulink url="http://www.gtk.org/">GTK+</ulink></term>
                <listitem><para>
                        This is needed for the GUI debugger.
                </para></listitem>
            </varlistentry>
            <varlistentry>
                <term><ulink url="http://gtkglext.sourceforge.net/">gtkglext</ulink></term>
                <term><ulink url="http://glew.sourceforge.net/">GLEW</ulink></term>
                <listitem><para>
                        These are needed for the texture and framebuffer viewers
                        in the GUI debugger.
                </para></listitem>
            </varlistentry>
            <varlistentry>
                <term><!-- FIXME URL -->GLUT</term>
                <listitem><para>
                        GLUT is required by the test suite.
                </para></listitem>
            </varlistentry>
            <varlistentry>
                <term><ulink url="http://ffmpeg.org/">FFmpeg</ulink></term>
                <listitem><para>
                        If FFmpeg is available, the included <systemitem
                            class="library">libavcodec</systemitem> is used
                        for video capture.
                </para></listitem>
            </varlistentry>
        </variablelist>
    </sect1>

    <sect1 id="install-scons">
        <title>SCons</title>
        <para>
            &Bugle; uses <ulink url="http://www.scons.org/">SCons</ulink>
            rather than <command>make</command> as its build system. To build
            &bugle;, simply run <command>scons</command> in the top-level
            directory, and the targets will be built in the <filename
                class="directory">build</filename> directory. The generic
            SCons options can be found by running
            <command>scons -H</command> and &bugle;-specific options can
            be found by running <command>scons --help</command>. The
            options are you most likely to need are:
        </para>
        <variablelist>
            <varlistentry>
                <term><parameter>--clean</parameter></term>
                <listitem><para>
                        Remove built files (for a more thorough clean,
                        remove the <filename
                            class="directory">build</filename> directory).
                </para></listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter>--sticky</parameter></term>
                <listitem><para>
                        Save the command-line variables to
                        <filename>config.py</filename>, from where they will
                        automatically be loaded next time. To reset variables
                        to automatic selection, remove or edit this file.
                </para></listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter>gltype=<replaceable>type</replaceable></parameter></term>
                <listitem><para>
                        Select the variant of OpenGL to build for. &Bugle;
                        only supports one variant at a time.
                </para></listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter>parts=<replaceable>list</replaceable></parameter></term>
                <listitem><para>
                        Select a subset of the parts of &bugle; to build
                        (useful if you are missing tools).
                </para></listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter>prefix=<replaceable>directory</replaceable></parameter></term>
                <listitem><para>
                        Select an installation prefix (similar to
                        <command>autoconf</command>).
                </para></listitem>
            </varlistentry>
        </variablelist>
        <para>
            Once you have successfully built &bugle;, you can run
            <command>scons install</command> to install it.
        </para>
    </sect1>

    <sect1 id="install-cross">
        <title>Cross-compilation</title>
        <para>
            &Bugle; supports cross-compilation with GCC. Other compilers are not
            yet supported should be relatively easy to add.
        </para>
        <para>
            First, a note about terminology. &Bugle; follows the
            <application>autoconf</application> conventions: the machine that
            you perform the compilation on is the <emphasis>build</emphasis>
            machine. The machine where you run the resulting interceptor is
            the <emphasis>host</emphasis> machine.
            <application>autoconf</application> also has the concept of a
            <emphasis>target</emphasis> machine, but that only applies to
            cross-toolchains and is not used in &bugle;.
        </para>
        <para>
            The basic step required to use cross-compilation is to add the
            <parameter>host=<replaceable>machine</replaceable></parameter>
            parameter to the <command>scons</command> command line. This
            causes the build to use, for example,
            <command><replaceable>machine</replaceable>-gcc</command> in place
            of <command>gcc</command>, and similarly for other parts of the
            toolchain. For example, to cross-compile for ARM one could use
            <parameter>host=arm-none-linux-gnueabi</parameter>. Note that this
            requires the cross-compiler to be on the
            <envar>PATH</envar>.
        </para>
        <para>
            Cross-compilation hosts are often a little different to the build
            machine, which can cause additional problems during building.
            Firstly, the build system uses
            <application>pkg-config</application> to detect optional packages
            such as GTK+, but <application>pkg-config</application> is likely
            to report information about the build machine rather than the
            host machine. If you know that these packages are not available on
            the host machine anyway, you can override the detection by
            specifying
            <parameter>without-<replaceable>pkg</replaceable>=yes</parameter>
            on the <command>scons</command> command line. Use <command>scons
                -h</command> to see a list of packages that can be suppressed.
        </para>
        <para>
            In addition, a common cross-compilation host is Linux without the
            X Windowing System. The code to intercept X events can be disabled
            by specifying <parameter>winsys=none</parameter>.
        </para>
    </sect1>

    <!-- FIXME rewrite this -->
    <sect1 id="install-windows">
        <title>Compiling on Windows</title>
        <para>
            Installing from source on Windows is supported, but it is
            significantly trickier than on
            UNIX-like systems, and currently only recommended for experts.
            The intended target is <ulink
                url="http://www.mingw.org">MinGW</ulink>; you can try using
            Cygwin as well, but it is not tested.
        </para>
        <para>
            Here is the list of steps I used to install on Windows, including
            support for the debugger. The versions numbers were the latest
            available at the time, but newer versions should work too.
        </para>
        <orderedlist>
            <listitem><para>
                    Install <application>MinGW</application> 5.1.4, including
                    <application>GCC</application> and
                    <application>G++</application>, but not
                    <application>make</application>.
            </para></listitem>
            <listitem><para>
                    Install <application>MSYS</application> 1.0.10.
            </para></listitem>
            <listitem><para>
                    Install <application>msysDTK</application> 1.0.1.
                    Alternatively, if you have Cygwin installed, add Cygwin's
                    <filename class="directory">bin</filename> directory to
                    the end of <envar>PATH</envar>.
            </para></listitem>
            <listitem><para>
                    Downloaded
                    <filename>mingw-libgnurx-2.5.1-bin.tar.gz</filename> and
                    <filename>mingw-libgnurx-2.5.1-dev.tar.gz</filename> from
                    the <application>MinGW</application> page, and unpacked
                    both into <filename class="directory">/mingw</filename>
                    (i.e., the directory in which
                    <application>MinGW</application> is installed).
            </para></listitem>
            <listitem><para>
                    Download the <application>GTK+</application> bundle
                    (2.12.11) from <ulink
                        url="http://www.gtk.org/download-windows.html">gtk.org</ulink>,
                    and unpack it into <filename
                        class="directory">/mingw</filename>.
            </para></listitem>
            <listitem><para>
                    Get the <application>gtkglext</application> installer from
                    <ulink url="http://www.bonifazi.eu/appunti/"/>, and
                    install it into <filename
                        class="directory">/mingw</filename>.
            </para></listitem>
            <listitem><para>
                    Download the source for <application>GLEW</application>
                    1.5 and unpack it into a temporary location and built it
                    using make, then install it with the command
                    <userinput>make GLEW_DEST=/mingw install</userinput>.
            </para></listitem>
            <listitem><para>
                    Grab the latest <ulink
                        url="http://www.opengl.org/registry/api/glext.h"><filename>glext.h</filename></ulink> and
                    <ulink
                        url="http://www.opengl.org/registry/api/wglext.h"><filename>wglext.h</filename></ulink>
                    headers, and put them in
                    <filename class="directory">/mingw/include/GL</filename>.
            </para></listitem>
        </orderedlist>
        <para>
            After installation, you will have a
            <filename>opengl32.dll</filename> file installed. When debugging a
            program, you need to place this on the path ahead of the real one.
            This can be achieved by copying it to the same directory as the
            program you intend to debug.
        </para>
    </sect1>
</chapter>
