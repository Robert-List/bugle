Plan for making API public and ABI stable
-----------------------------------------
Everything exported by budgie should be masked by budgielib, with the
exception of 
- the function_call union (which does not affect the ABI),
- the macros for calling original functions (which are guarded against ABI
  changes by weak symbols)
- the function_call type

- stuff that is public and non-generated
  - types.h (utils)
    - budgie_function
    - budgie_group
    - budgie_type
    - generic_function_call
    - #includes types2.h to pull in function_call
  - reflect.c and reflect.h (utils)
    - get information about functions and groups, EXCEPT addresses
    - budgie_dump_any_type, budgie_dump_any_call
  - addresses.h, addresses.c (lib)
    - wrapper and real function pointers (only valid with lib.c)
    - reentrance helpers
    - bypass helpers
    - prototype for invoker
- stuff that is public but generated
  - call.h (lib)
    define wrapper functions for calling the original OpenGL
  - types2.h (lib? doesn't generate any code)
    the function_call type
- stuff that is private but not generated
  - internal.h, internal.c (util)
    - declaration of tables, excluding addresses
    - dumper helpers
    - anything else that is only used by generated util code
  - lib.h
    - helper functions used only within lib.c (implemented in address.c where appropriate)
- stuff that is private and generated
  - lib.c (lib)
    - wrapper functions
    - aliases to wrappers
    - bypass table
    - table of wrappers, empty table of real pointers
    - invoker
  - defines.h (util? doesn't generate code)
    - #defines for functions, types, groups
    - BUDGIE_FUNCTION_COUNT etc
  - tables.c (util)
    - function info
    - type info
    - group info
    - library info
    - generated length and dumper functions

Still outstanding:
- state tables rely heavily on TYPE_ defines - not critical since they're
  in the core, but maybe need some reflection to aid debugger

General TODO
------------

camera filter-set
-----------------
- handle display lists properly
- do the right thing when event handling is in a different
  thread to rendering
- invalidate every frame when a motion key is depressed

gldb
----
- allow Ctrl-C to abort current line when reading commands
- set filter variables on the fly
- enable reporting of segfaults
- break on particular GL errors, not just 'all errors'
- fix display of uniform arrays

gldb-gui
--------
- VBO decode
- convert state names to UTF8
- enabling and disabling filter sets, and setting variables
- texture viewer:
  - interaction with cube map cube
  - display of pixel values on cube map
  - stats
  - LOD bias
  - alpha blending / display of alpha
  - test sRGB textures
  - better export for non [0,1] colours e.g. OpenEXR export
- shader viewer
  - show metadata like uniforms, info log
- test for all extensions before using them
- trace window?
- figure out why BadValue is sometimes generated on exit
- statistics tab
- state diffs
  - diff to the default

bugle
-----
- dump backtrace on error
- check whether all dependencies on trackextensions are listed
- fix leak of aux contexts on glXDestroyContext
- exploit per-context, per-filter state e.g. for video
- option to use pid in log filename or log file
- proper support for enabled but inactive filtersets
- handle use of GLX_SGIX_fbconfig rather than GLX 1.3 to manage contexts
- make segfault handling adhere better to POSIX
- rewrite some things to use hash tables
- autoconf test for GLENUM_IS_GLUINT
- cap overrides
- memory use statistics
- better handling of texture proxies
- fill in the rest of the state (image state, mainly)
- handle GL shared and unshared objects correctly (queries unshared)
- mirror GL objects (textures etc) in the bugle object system
- improve support for GLSL (more type information)
- capture more information about call lists
- capture and replay
- improve bugle_call_get_error and bugle_begin_internal_render so that using
  them doesn't require every single function call to be intercepted
- support for GL_GREMEDY_string_marker and GL_GREMEDY_frame_terminator
- finish documenting API in DocBook

budgie
------
- more autoconf tests (e.g. regex)
- robust logging, to avoid segfaulting
- move filter framework into budgie? May suck in xevent stuff

tests
-----
- multithreaded conformance tests
- coverage tests (glean?)
- autotool tests for glut

long term
---------
- replace GLee with something C89 compliant
- internationalisation
- OpenEXR export
- Windows support
- OpenGL 3.0 support
- make gldb-gui tabs totally modular (separate shared objects)
- write support for state
- robust network debugging protocol
- shader debugging
- better movie capture
  - option of a separate thread, for parallel encoding
- install headers and pkgconfig files to simplify 3rd party filter-sets
