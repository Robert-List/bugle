BuGLe pre-alpha release
=======================

This is a VERY early release, and is mosy unlikely to do what you want.
It is only tested on GNU/Linux with gcc and NVIDIA OpenGL drivers. I
would like to support all POSIX platforms that use dynamic loading and
something like LD_PRELOAD, so if things don't work on your platform
then let me know why.

Here are a few things you can do so far
- capture a log of what a program does (won't capture everything yet)
- pause after every frame, and get crude state dumps
- check for GL errors after every call
- force a wireframe mode

To build, you should be able to use any C and C++ compiler, although
gcc is recommended (2.95.3 and 3.3.2 have both been tested). If you
have problems building, first try erasing src/data/gl.tu and use gcc
3.x (gcc 3.x is required to rebuild this file for you machine).
This file contains somewhat architecture-dependent data, and this MAY
leak through to the generated code. For generic build instructions, see
INSTALL.

To run usefully, you will need a configuration file
$HOME/.bugle/filters. You can copy the example file doc/example.txt.
Execute your program something like the following:

$ BUGLE_CHAIN=trace LD_PRELOAD=/usr/local/lib/libbugle.so glxgears

where BUGLE_CHAIN specifies a combination of filters to use. The name
references a section in the configuration file; the example file
doc/example.txt documents the configurations it provides.

The debugger mode is currently braindead: it will continue whenever you
hit enter (so the app had better not be depending on stdin), and if you
type in "state" and hit enter (without the quotes) then it will display
a crude, incomplete and probably inaccurate state dump. The trace mode
will write a big call log to the specified filename (or stderr if you
leave out that line), and also write GL errors to stderr. A very useful
filterset if you use NVIDIA drivers is the unwindstack filterset: it
attempts to make enough of a recovery from segfaults inside the driver
to enable you to determine where in your code things went wrong (since
the NVIDIA drivers don't have frame pointers).

Feedback
========
I am interested in getting feedback about this tool: bugs you've found
(but first read this file and the FAQ to make sure it isn't already
known), suggestions for improvements, whatever. My address is
bmerry@users.sourceforge.net.
