#!/usr/bin/env python

import BugleChecks

def header_checks(env):
    '''
    Checks that will go into the global config.h, and are needed to determine
    what to put in header files.
    '''
    if env.GetOption('help') or env.GetOption('clean'):
        return env

    conf = Configure(env, custom_tests = BugleChecks.tests, config_h = '#/config.h')
    conf.Define('_POSIX_C_SOURCE', '200112L', 'Enable IEEE 1003.1-2001 functionality')
    return conf.Finish()

def internal_checks(env):
    '''
    Checks that will only affect C files in the platform directory.
    '''

    if env.GetOption('help') or env.GetOption('clean'):
        return env

    conf = Configure(env, custom_tests = BugleChecks.tests, config_h = 'platform_config.h')
    # Get benefit of as many extensions as possible
    conf.Define('_XOPEN_SOURCE', '600')
    conf.Define('_GNU_SOURCE', '1')
    conf.CheckFunc('vasprintf')
    conf.CheckFunc('strdup')
    conf.CheckFunc('strndup')
    return conf.Finish()

Import('envs', 'srcdir', 'builddir')

envs['host'].Append(CPPPATH = [
    srcdir.Dir('platform/posix'),
    builddir.Dir('platform/posix')],
    LIBS = ['-lm'])
envs['host'].MergeFlags('-pthread')
envs['host'] = header_checks(envs['host'])

platform_env = internal_checks(envs['host'].Clone())

platform_libbugleutils = platform_env.SharedObject(source = [
    'string-posix.c',
    'math-posix.c',
    'io-posix.c',
    'time-posix.c',
    ])

platform_libbugle = platform_env.SharedObject(source = [
    'dl-posix.c',
    'dlopen.c'
    ])

Export('platform_libbugleutils', 'platform_libbugle')
