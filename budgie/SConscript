#!/usr/bin/env python

Import('env')

env.CXXFile('bcparser.cpp', 'bcparser.yy', YACCFLAGS = '-d --defines=${TARGET.dir}/bcparser.h')
env.CXXFile('bclexer.cpp', 'bclexer.ll', LEXFLAGS = '-Pbc_yy')
env.CXXFile('tulexer.cpp', 'tulexer.ll')

budgie_list = env.Program('budgie', source = [
    'budgie.cpp',
    'tree.cpp',
    'treeutils.cpp',
    'bcparser.cpp',
    'bclexer.cpp',
    'tulexer.cpp'])

def budgie_emitter(target, source, env):
    target.extend([
            '#/budgielib/lib.c',
            '#/budgielib/tables.c',
            '#/budgielib/defines.h',
            '#/include/budgie/types2.h',
            '#/include/budgie/call.h'
            ])
    return target, source

def budgie_generator(source, target, env, for_signature):
    return '%s -I %s -T %s %s' % (env['BUDGIE'], env['BUDGIEPATH'], source[0], source[1])

def alias_emitter(target, source, env):
    source.append('#/gengl/gengl.perl')
    return target, source

def alias_generator(source, target, env, for_signature):
    cmd = 'perl ' + source[-1].path + ' --mode=alias'
    for header in source[0:-1]:
        cmd += ' ' + header.path
    cmd += ' > ' + target[0].path
    return cmd

env.Append(BUDGIE = budgie_list[0].path)
budgie_builder = env.Builder(
        generator = budgie_generator,
        src_suffix = '.tu',
        emitter = budgie_emitter)

alias_builder = env.Builder(
        generator = alias_generator,
        src_suffix = '.h',
        emitter = alias_emitter)

env.Append(BUILDERS = {
    'Budgie': budgie_builder,
    'BudgieAlias': alias_builder
    })
